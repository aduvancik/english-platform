..............1. Нормалізація
Нормалізація – це процес організації даних у базі даних для зменшення надлишковості та покращення цілісності даних. Основні ідеї нормалізації:

Розбиття даних: поділ великих таблиць на менші, спеціалізовані таблиці.
Встановлення зв’язків: використання зовнішніх ключів для встановлення відносин між таблицями.
Цілісність даних: забезпечення унікальності рядків та атомарності даних (тобто кожне поле містить лише одне значення).
Приклад: Таблиця зі студентами та їхніми курсами може бути розділена на окрему таблицю студентів, курсів та таблицю зв’язку «Студент–Курс».

.............2. Денормалізація
Денормалізація – це навмисне введення надлишковості в базу даних, з метою покращення продуктивності запитів. Замість численних JOIN-операцій дані можуть зберігатися в одній таблиці, що дозволяє швидше отримувати результати, але збільшує ризик виникнення невідповідностей та ускладнює підтримку даних.

Приклад: Замість того, щоб при кожному запиті виконувати JOIN між таблицями «Клієнти» і «Замовлення», можна зберігати ім’я клієнта безпосередньо в таблиці «Замовлення».

..............3. Джойни (JOIN)
Джойни – це операції в SQL, які дозволяють об'єднувати дані з декількох таблиць на основі логічного зв’язку між ними (зазвичай за допомогою зовнішніх ключів). Основні типи джойнів:

INNER JOIN: повертає записи, для яких є відповідність у обох таблицях.
LEFT (OUTER) JOIN: повертає всі записи з лівої таблиці та відповідні записи з правої; якщо відповідності немає, повертаються NULL.
RIGHT (OUTER) JOIN: аналогічно LEFT JOIN, але повертає всі записи з правої таблиці.
FULL (OUTER) JOIN: повертає всі записи, коли є відповідність в одній з таблиць; там, де відповідності немає, заповнюється NULL.
CROSS JOIN: повертає декартовий добуток записів обох таблиць.
..........4. ORM (Object-Relational Mapping)
ORM (Об'єктно-реляційне відображення) – це технологія, яка дозволяє розробникам працювати з реляційними базами даних, використовуючи об'єктно-орієнтований підхід. Основні переваги ORM:

Абстрагування SQL: дозволяє працювати з базою даних за допомогою об'єктів, не пишучи складні SQL-запити вручну.
Підвищення продуктивності розробки: спрощує роботу з CRUD-операціями (створення, читання, оновлення, видалення).
Портативність: спрощує перехід між різними СУБД.


............5. Три типи зв'язків між таблицями
У реляційних базах даних існують такі основні типи зв'язків між таблицями:

Один-до-одного (One-to-One)

Кожен запис у першій таблиці відповідає лише одному запису у другій таблиці.
Приклад: таблиця з персональними даними користувача та таблиця з його профільними налаштуваннями.
Один-до-багатьох (One-to-Many)

Один запис у першій таблиці може бути пов’язаний з багатьма записами у другій таблиці.
Приклад: один клієнт може мати кілька замовлень.
Багато-до-багатьох (Many-to-Many)

Записи з однієї таблиці можуть бути пов’язані з багатьма записами з іншої таблиці та навпаки.
Реалізується через проміжну таблицю (junction table).
Приклад: студенти та курси – один студент може відвідувати багато курсів, і один курс може мати багатьох студентів.


........6. Транзакція
Транзакція – це послідовність операцій з базою даних, яка виконується як єдиний блок. Всі операції в транзакції мають бути завершені успішно, інакше всі зміни відміняються (відбувається відкат). Це забезпечує цілісність даних.

Приклад: Переказ коштів між банківськими рахунками – гроші знімаються з одного рахунку і додаються до іншого. Якщо одна з операцій не вдається, система відміняє всі зміни.

..........7. Атомарність
Атомарність – це одна з властивостей транзакцій (ACID), яка гарантує, що всі операції в транзакції виконуються як одне ціле. Якщо хоча б одна операція не вдалася, транзакція скасовується, і база даних повертається до початкового стану.

.........8. ACID
ACID – набір властивостей, які гарантують надійність виконання транзакцій у базі даних:

A (Atomicity) – атомарність: транзакція виконується як одне ціле.
C (Consistency) – цілісність: транзакція переводить базу даних з одного коректного стану в інший.
I (Isolation) – ізоляція: одночасні транзакції не впливають одна на одну.
D (Durability) – надійність: після успішного завершення транзакції її результати зберігаються навіть при збоях системи.


.............9. Рівні ізоляції транзакцій (4 рівні)
Ізоляція транзакцій визначає, наскільки зміни однієї транзакції видимі іншим, що ще не завершилися. Основні рівні ізоляції:

Read Uncommitted (Читання непідтверджених даних)

Транзакція може бачити дані, які ще не підтверджені іншими транзакціями.
Можливі брудні читання (dirty reads).
Read Committed (Читання підтверджених даних)

Транзакція бачить лише підтверджені зміни інших транзакцій.
Запобігає брудним читанням, але допускає неповторювані читання (non-repeatable reads) та фантомні читання (phantom reads).
Repeatable Read (Повторюване читання)

Гарантує, що дані, прочитані транзакцією, не зміняться протягом її виконання.
Запобігає неповторюваним читанням, але фантомні читання можуть все ще траплятися.
Serializable (Серіалізованість)

Найвищий рівень ізоляції, при якому транзакції виконуються послідовно, ніби одна за одною.
Усунення всіх проблем із читанням, але знижується продуктивність через низький рівень паралелізму.


...........10. CAP-теорема
CAP-теорема описує компроміс між трьома ключовими властивостями розподілених систем:

Consistency (Узгодженість)

Усі вузли системи мають однакові дані в один і той же час.
Availability (Доступність)

Кожен запит до системи отримує відповідь, незалежно від того, чи відбувається відмова деяких вузлів.
Partition Tolerance (Стійкість до розбиття мережі)

Система продовжує працювати, навіть якщо виникають проблеми із зв’язком між частинами системи (мережеві розбиття).
Основна ідея:
У розподіленій системі неможливо гарантувати одночасно всі три властивості. Зазвичай доводиться робити вибір між:

CP (Consistency + Partition Tolerance): система забезпечує узгодженість та стійкість до розбиття, але може пожертвувати доступністю.
AP (Availability + Partition Tolerance): система забезпечує доступність та стійкість до розбиття, але може пожертвувати узгодженістю.
CA (Consistency + Availability): така система забезпечує узгодженість і доступність, але не може ефективно працювати при розбитті мережі.
Приклад застосування:

Традиційні реляційні СУБД (наприклад, MySQL, PostgreSQL) зазвичай орієнтуються на CA.
Розподілені системи, як-от Cassandra чи DynamoDB, зазвичай працюють за моделлю AP або CP в залежності від налаштувань.